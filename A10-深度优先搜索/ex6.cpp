/*
为了感谢新老客户的鼎力支持和厚爱，在元旦节来临之际，拿出丰厚的礼品来进行抽奖活动。抽奖规则如下：抽奖箱中装有 n 个小球，第 i 个球的积分为 a[i]，每次从箱中抽取一个小球，记录积分无放回，总共抽取 k 次，求积分和为素数的方案数。

提示
样例解释：
当 n=4，k=3，4 个小球的积分分别为 3,7,12,19 时，可得全部的组合与它们的和为：
3+7+12=22
3+7+19=29
7+12+19=38
3+12+19=34
此时和为素数的方案数只有一种：3+7+19=29。
注意：3+7+19=29 、 7+3+19=29 、 19+3+7=29 、 19+7+3=29、 3+19+7=29、 7+19+3=29 为同一种方案数。

输入格式
第一行两个空格隔开的整数 n,k（1≤n≤20，k<n）。
第二行 n 个整数表示每个小球的积分，分别为 a 
1,a2,?,an（1≤ai?≤50），每一个积分都是独一无二的。

输出格式
输出一个整数，表示种类数。

样例组输入
4 3
3 7 12 19
样例组输出
1
*/
#include <iostream>
#include <cmath>
using namespace std;

int n, k; // n 个小球，从中选 k 个（不重复）
int total; // 总积分为素数的方案数
int a[20]; // 每个小球的积分, 1 <= a[i] <= 50，每一个积分都是独一无二的

// 判断一个数是否为素数
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num == 2) return true;
    if (num % 2 == 0) return false;
    for (int i = 3; i <= sqrt(num); i += 2) {
        if (num % i == 0) return false;
    }
    return true;
}

// 递归生成组合并检查和是否为素数
void dfs(int picked, int begin, int score) { // picked 个球被选中，从 begin 开始继续搜索，总积分为 score
    if (picked == k) { // 已选中 k 个球，递归终止
        if (isPrime(score)) { // 检查积分和是否为素数
        	++total; // 是素数，方案数加1，返回
        }
        return; // 不是素数则直接返回
    }
    for (int i = begin; i < n; ++i) { // 从 begin 开始搜索
    	dfs(picked + 1, i + 1, score + a[i]); // 选中位置i上的数字，递归搜索下一个数字
    }
}

int main() {
    cin >> n >> k;
    for (int i = 0; i < n; ++i)
        cin >> a[i];
    // DFS搜索所有可能的组合
	dfs(0, 0, 0); // 初始状态：0个球被选中，从位置为0的小球开始搜索，总积分为0
    cout << total << endl;
    return 0;
}

/*
程序状态分析：
假设 n=4，k=3，
4个小球的积分 a = [3,7,12,19]

初始调用
dfs(0, 0, 0) // 0个球被选中，搜索位置为0，总积分为0

递归调用
for(i=0, i=1, i=2, i=3)
    i=0, dfs(1, 1, 3); // 选中a[0]=3，1个球被选中，搜索位置为1，总积分为3
    for(i=1, i=2, i=3)
        i=1, dfs(2, 2, 3+7); // 选中a[1]=7，2个球被选中，搜索位置为2，总积分为10
        for(i=2, i=3)
            i=2, dfs(3, 3, 3+7+12); // 选中a[2]=12，3个球被选中，搜索位置为3，总积分为22
            递归终止 picked = 3，score=22不是素数，total=0，返回
            i=3, dfs(3, 4, 3+7+19); // 选中a[3]=19，3个球被选中，搜索位置为4，总积分为29
            递归终止 picked = 3，score=29是素数，total=1，返回
        i=2, dfs(2, 3, 3+12); // 选中a[2]=12，2个球被选中，搜索位置为3，总积分为15
        for(i=3)
            i=3, dfs(3, 4, 3+12+19); // 选中a[3]=19，3个球被选中，搜索位置为4，总积分为34
            递归终止 picked = 3，score=34不是素数，total=1，返回
    i=1, dfs(1, 2, 7); // 选中a[1]=7，1个球被选中，搜索位置为2，总积分为7
    for(i=2, i=3)
        i=2, dfs(2, 3, 7+12); // 选中a[2]=12，2个球被选中，搜索位置为3，总积分为19
        for(i=3)
            i=3, dfs(3, 4, 7+12+19); // 选中a[3]=19，3个球被选中，搜索位置为4，总积分为38
            递归终止 picked = 3，score=38不是素数，total=1，返回
    i=2, dfs(1, 3, 12); // 选中a[2]=12，1个球被选中，搜索位置为3，总积分为12
    for(i=3)
        i=3, dfs(2, 4, 12+19); // 选中a[3]=19，2个球被选中，搜索位置为4，总积分为31
    i=3, dfs(1, 4, 19); // 选中a[3]=19，1个球被选中，搜索位置为4，总积分为19

最终得到
total = 1

*/

